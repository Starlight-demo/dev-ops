pipeline {
    agent none
    environment {
        SERVER_CREDENTIALS = 's3-access'
        BUCKET = 'maksym-team-bucket'
        REGION = 'eu-central-1'
        BACKEND_ACCESS_KEY = credentials('mt_backend_access_key')
        BACKEND_SECRET_KEY = credentials('mt_backend_secret_key')
        DATABASE_URL = credentials('mt_database_url')
        DATABASE_PASSWORD = credentials('mt_database_password')
        WEBHOOK_URL = credentials('DiscordWebhookMT')
    }
    stages {
        stage('Build') {
            agent { label 'java && jdk-17' }
            steps {
                git branch: 'dev', url: 'https://github.com/Team-Maksym/backend.git'
                sh '''
                    export JAVA_HOME="/lib/jvm/jdk-17"

                    export BUCKET="maksym-team-backend"
                    export S3_ACCESS_KEY=${BACKEND_ACCESS_KEY}
                    export S3_SECRET_KEY=${BACKEND_SECRET_KEY}
                    export S3_REGION=${REGION}

                    export DB_LOGIN="mt"
                    export DB_PASSWORD=${DATABASE_PASSWORD}
                    export DB_URL=${DATABASE_URL}

                    rm -f .env
                    export SPRING_PROFILES_ACTIVE=prod

                    chmod 744 ./mvnw
                    ./mvnw clean package
                    cp ./target/backend*.jar ./backend-${BUILD_NUMBER}.jar
                '''
                withAWS(credentials: "${SERVER_CREDENTIALS}", region: "${REGION}") {
                    script {
                        s3Upload(file: "./backend-${BUILD_NUMBER}.jar", bucket: "${BUCKET}", path:"backend/backend-${BUILD_NUMBER}.jar")
                    }
                }
                sh 'rm ./backend-${BUILD_NUMBER}.jar'
            }
        }
        stage('Deploy') {
            agent { label 'java && target && dev' }
            steps {
                withAWS(credentials: "${SERVER_CREDENTIALS}", region: "${REGION}") {
                    script {
                        s3Download(file:"./backend-${BUILD_NUMBER}.jar", bucket:"${BUCKET}", path:"backend/backend-${BUILD_NUMBER}.jar")
                    }
                }
                sh '''
                    sudo systemctl stop starlight || true
                    chmod 755 ./backend/install-systemd-service.sh
                    ./backend/install-systemd-service.sh
                    mv -f ./backend-${BUILD_NUMBER}.jar ~/backend.jar
                    sudo systemctl enable starlight --now
                '''
            }
        }
    }
    post {
        always {
            discordSend description: "Status: `${currentBuild.currentResult}`\nBuild log: ${BUILD_URL}consoleText",
                link: env.BUILD_URL,
                result: currentBuild.currentResult,
                title: JOB_NAME,
                webhookURL: "${env.WEBHOOK_URL}"
        }
    }
}